---
description: pocketsphinx documentation
globs: 
alwaysApply: false
---
Class: Pocketsphinx::Decoder
Inherits:
Object
Pocketsphinx::Decoder
(hide)
Includes:
API::CallHelpers
Defined in:
lib/pocketsphinx/decoder.rb
Defined Under Namespace
Classes: Hypothesis, Word

Instance Attribute Summary
collapse
#configuration ⇒ Object
Returns the value of attribute configuration.
#ps_api ⇒ Object
Instance Method Summary
collapse
#decode(audio_path_or_file, max_samples = 2048) ⇒ Object
Decode a raw audio stream as a single utterance, opening a file if path given.
#decode_raw(audio_file, max_samples = 2048) ⇒ Object
Decode a raw audio stream as a single utterance.
#end_utterance ⇒ Object
End utterance processing.
#get_search ⇒ Object
Returns name of curent search in decoder.
#hypothesis ⇒ Hypothesis
Get hypothesis string (with #path_score and #utterance_id).
#in_speech? ⇒ Boolean
Checks if the last feed audio buffer contained speech.
#initialize(configuration, ps_decoder = nil) ⇒ Decoder constructor
Initialize a Decoder.
#process_raw(buffer, size, no_search = false, full_utt = false) ⇒ Object
Decode raw audio data.
#ps_decoder ⇒ Object
#reconfigure(configuration = nil) ⇒ Object
Reinitialize the decoder with updated configuration.
#set_jsgf_string(jsgf_string, name = 'default') ⇒ Object
Adds new search using JSGF model.
#set_search(name = 'default') ⇒ Object
Actives search with the provided name.
#start_utterance ⇒ Object
Start utterance processing.
#unset_search(name = 'default') ⇒ Object
Unsets the search and releases related resources.
#words ⇒ Array
Get an array of words with start/end frame values (10msec/frame) for current hypothesis.
Methods included from API::CallHelpers
#api_call

Constructor Details
permalink#initialize(configuration, ps_decoder = nil) ⇒ Decoder
Initialize a Decoder

Note that this initialization process actually updates the Configuration based on settings which are found in feat.params along with the acoustic model.

Parameters:

configuration (Configuration)
ps_decoder (FFI::Pointer) (defaults to: nil) — An optional Pocketsphinx decoder. One is initialized if not provided.
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 31

def initialize(configuration, ps_decoder = nil)
  @configuration = configuration
  init_decoder if ps_decoder.nil?
end
Instance Attribute Details
permalink#configuration ⇒ Object
Returns the value of attribute configuration.

permalink#ps_api ⇒ Object
Instance Method Details
permalink#decode(audio_path_or_file, max_samples = 2048) ⇒ Object
Decode a raw audio stream as a single utterance, opening a file if path given

See #decode_raw

Parameters:

audio_path_or_file (IO) — The raw audio stream or file path to decode as a single utterance
max_samples (Fixnum) (defaults to: 2048) — The maximum samples to process from the stream on each iteration
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 54

def decode(audio_path_or_file, max_samples = 2048)
  case audio_path_or_file
  when String
    File.open(audio_path_or_file, 'rb') { |f| decode_raw(f, max_samples) }
  else
    decode_raw(audio_path_or_file, max_samples)
  end
end
permalink#decode_raw(audio_file, max_samples = 2048) ⇒ Object
Decode a raw audio stream as a single utterance.

No headers are recognized in this files. The configuration parameters samprate and input_endian are used to determine the sampling rate and endianness of the stream, respectively. Audio is always assumed to be 16-bit signed PCM.

Parameters:

audio_file (IO) — The raw audio stream to decode as a single utterance
max_samples (Fixnum) (defaults to: 2048) — The maximum samples to process from the stream on each iteration
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 71

def decode_raw(audio_file, max_samples = 2048)
  start_utterance

  FFI::MemoryPointer.new(:int16, max_samples) do |buffer|
    while data = audio_file.read(max_samples * 2)
      buffer.write_string(data)
      process_raw(buffer, data.length / 2)
    end
  end

  end_utterance
end
permalink#end_utterance ⇒ Object
End utterance processing

[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 106

def end_utterance
  api_call :ps_end_utt, ps_decoder
end
permalink#get_search ⇒ Object
Returns name of curent search in decoder

[Hide source]


# File 'lib/pocketsphinx/decoder.rb', line 166

def get_search
  ps_api.ps_get_search(ps_decoder)
end
permalink#hypothesis ⇒ Hypothesis
Get hypothesis string (with #path_score and #utterance_id).

Returns:

(Hypothesis) — Hypothesis (behaves like a string)
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 118

def hypothesis
  mp_path_score = FFI::MemoryPointer.new(:int32, 1)

  hypothesis = ps_api.ps_get_hyp(ps_decoder, mp_path_score)
  posterior_prob = ps_api.ps_get_prob(ps_decoder)

  hypothesis.nil? ? nil : Hypothesis.new(
    hypothesis,
    log_prob_to_linear(mp_path_score.get_int32(0)),
    log_prob_to_linear(posterior_prob)
  )
end
permalink#in_speech? ⇒ Boolean
Checks if the last feed audio buffer contained speech

Returns:

(Boolean)
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 111

def in_speech?
  ps_api.ps_get_in_speech(ps_decoder) != 0
end
permalink#process_raw(buffer, size, no_search = false, full_utt = false) ⇒ Object
Decode raw audio data.

Parameters:

no_search (Boolean) (defaults to: false) — If non-zero, perform feature extraction but don’t do any recognition yet. This may be necessary if your processor has trouble doing recognition in real-time.
full_utt (Boolean) (defaults to: false) — If non-zero, this block of data is a full utterance worth of data. This may allow the recognizer to produce more accurate results.
Returns:

Number of frames of data searched
[Hide source]


# File 'lib/pocketsphinx/decoder.rb', line 92

def process_raw(buffer, size, no_search = false, full_utt = false)
  api_call :ps_process_raw, ps_decoder, buffer, size, no_search ? 1 : 0, full_utt ? 1 : 0
end
permalink#ps_decoder ⇒ Object
[Hide source]



# File 'lib/pocketsphinx/decoder.rb', line 190

def ps_decoder
  init_decoder if @ps_decoder.nil?
  @ps_decoder
end
permalink#reconfigure(configuration = nil) ⇒ Object
Reinitialize the decoder with updated configuration.

This function allows you to switch the acoustic model, dictionary, or other configuration without creating an entirely new decoding object.

Parameters:

configuration (Configuration) (defaults to: nil) — An optional new configuration to use. If this is nil, the previous configuration will be reloaded, with any changes applied.
[Hide source]


# File 'lib/pocketsphinx/decoder.rb', line 43

def reconfigure(configuration = nil)
  self.configuration = configuration if configuration
  reinit_decoder
end
permalink#set_jsgf_string(jsgf_string, name = 'default') ⇒ Object
Adds new search using JSGF model.

Convenience method to parse JSGF model from string and create a search.

Parameters:

jsgf_string (String) — The JSGF grammar
name (String) (defaults to: 'default') — The search name
[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 161

def set_jsgf_string(jsgf_string, name = 'default')
  api_call :ps_set_jsgf_string, ps_decoder, name, jsgf_string
end
permalink#set_search(name = 'default') ⇒ Object
Actives search with the provided name.

Activates search with the provided name. The search must be added before using either ps_set_fsg(), ps_set_lm() or ps_set_kws().

[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 174

def set_search(name = 'default')
  api_call :ps_set_search, ps_decoder, name
end
permalink#start_utterance ⇒ Object
Start utterance processing.

This function should be called before any utterance data is passed to the decoder. It marks the start of a new utterance and reinitializes internal data structures.

[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 101

def start_utterance
  api_call :ps_start_utt, ps_decoder
end
permalink#unset_search(name = 'default') ⇒ Object
Unsets the search and releases related resources.

Unsets the search previously added with using either ps_set_fsg(), ps_set_lm() or ps_set_kws().

[Hide source]


# File 'lib/pocketsphinx/decoder.rb', line 182

def unset_search(name = 'default')
  api_call :ps_unset_search, ps_decoder, name
end
permalink#words ⇒ Array
Get an array of words with start/end frame values (10msec/frame) for current hypothesis

Returns:

(Array) — Array of words with start/end frame values (10msec/frame)
[Hide source]


# File 'lib/pocketsphinx/decoder.rb', line 134

def words
  mp_path_score = FFI::MemoryPointer.new(:int32, 1)
  start_frame   = FFI::MemoryPointer.new(:int32, 1)
  end_frame     = FFI::MemoryPointer.new(:int32, 1)

  seg_iter = ps_api.ps_seg_iter(ps_decoder, mp_path_score)
  words    = []

  until seg_iter.null? do
    ps_api.ps_seg_frames(seg_iter, start_frame, end_frame)
    words << Pocketsphinx::Decoder::Word.new(
      ps_api.ps_seg_word(seg_iter),
      start_frame.get_int32(0),
      end_frame.get_int32(0)
    )
    seg_iter = ps_api.ps_seg_next(seg_iter)
  end

  words
end

Class: Pocketsphinx::Decoder::Hypothesis
Inherits:
SimpleDelegatorshow all
Defined in:
lib/pocketsphinx/decoder.rb
Instance Attribute Summary
collapse
#path_score ⇒ Object
Returns the value of attribute path_score.
#posterior_prob ⇒ Object
Returns the value of attribute posterior_prob.
Instance Method Summary
collapse
#initialize(string, path_score, posterior_prob = nil) ⇒ Hypothesis constructor
A new instance of Hypothesis.
Constructor Details
permalink#initialize(string, path_score, posterior_prob = nil) ⇒ Hypothesis
Returns a new instance of Hypothesis.

[Hide source]

# File 'lib/pocketsphinx/decoder.rb', line 11

def initialize(string, path_score, posterior_prob = nil)
  @path_score = path_score
  @posterior_prob = posterior_prob

  super(string)
end
Instance Attribute Details
permalink#path_score ⇒ Object
Returns the value of attribute path_score.

permalink#posterior_prob ⇒ Object
Returns the value of attribute posterior_prob.

Class: Pocketsphinx::Decoder::Word
Inherits:
Structshow all
Defined in:
lib/pocketsphinx/decoder.rb
Instance Attribute Summary
collapse
#end_frame ⇒ Object
Returns the value of attribute end_frame.
#start_frame ⇒ Object
Returns the value of attribute start_frame.
#word ⇒ Object
Returns the value of attribute word.
Instance Attribute Details
permalink#end_frame ⇒ Object
Returns the value of attribute end_frame

Returns:

(Object) — the current value of end_frame
permalink#start_frame ⇒ Object
Returns the value of attribute start_frame

Returns:

(Object) — the current value of start_frame
permalink#word ⇒ Object
Returns the value of attribute word

Returns:

(Object) — the current value of word

lass: Pocketsphinx::SpeechRecognizer
Inherits:
Objectshow all
Defined in:
lib/pocketsphinx/speech_recognizer.rb
Overview
Reads audio data from a recordable interface and decodes it into utterances

Essentially orchestrates interaction between Recordable and Decoder, and detects new utterances.

Direct Known Subclasses
AudioFileSpeechRecognizer, LiveSpeechRecognizer

Constant Summary
collapse
ALGORITHMS =
[:after_speech, :continuous]
Instance Attribute Summary
collapse
#configuration ⇒ Object
#decoder ⇒ Object
#recordable ⇒ Object
Instance Method Summary
collapse
#algorithm ⇒ Symbol
Determine which algorithm to use for co-ordinating speech recognition.
#in_speech? ⇒ Boolean
#initialize(configuration = nil) ⇒ SpeechRecognizer constructor
A new instance of SpeechRecognizer.
#pause ⇒ Object
#recognize(max_samples = 2048, &b) ⇒ Object
Recognize speech and yield hypotheses in infinite loop.
#recognizing? ⇒ Boolean
#reconfigure(configuration = nil) ⇒ Object
Reinitialize the decoder with updated configuration.
#start ⇒ Object
#stop ⇒ Object
Constructor Details
permalink#initialize(configuration = nil) ⇒ SpeechRecognizer
Returns a new instance of SpeechRecognizer.

[Hide source]

# File 'lib/pocketsphinx/speech_recognizer.rb', line 13

def initialize(configuration = nil)
  @configuration = configuration
end
Instance Attribute Details
permalink#configuration ⇒ Object
permalink#decoder ⇒ Object
permalink#recordable ⇒ Object
Instance Method Details
permalink#algorithm ⇒ Symbol
Determine which algorithm to use for co-ordinating speech recognition

:continuous yields as soon as any hypothesis is available :after_speech yields hypothesis on speech -> silence transition if one exists Default is :after_speech

Returns:

(Symbol) — :continuous or :after_speech
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 97

def algorithm
  if configuration.respond_to?(:recognition_algorithm)
    configuration.recognition_algorithm
  else
    ALGORITHMS.first
  end
end
permalink#in_speech? ⇒ Boolean
Returns:

(Boolean)
[Hide source]

# File 'lib/pocketsphinx/speech_recognizer.rb', line 62

def in_speech?
  # Use Pocketsphinx's implementation by default
  decoder.in_speech?
end
permalink#pause ⇒ Object
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 71

def pause
  recognizing?.tap do |was_recognizing|
    stop if was_recognizing
    yield
    start if was_recognizing
  end
end
permalink#recognize(max_samples = 2048, &b) ⇒ Object
Recognize speech and yield hypotheses in infinite loop

Parameters:

max_samples (Fixnum) (defaults to: 2048) — Number of samples to process at a time
[Hide source]

# File 'lib/pocketsphinx/speech_recognizer.rb', line 46

def recognize(max_samples = 2048, &b)
  unless ALGORITHMS.include?(algorithm)
    raise NotImplementedError, "Unknown speech recognition algorithm: #{algorithm}"
  end

  start unless recognizing?

  FFI::MemoryPointer.new(:int16, max_samples) do |buffer|
    loop do
      send("recognize_#{algorithm}", max_samples, buffer, &b) or break
    end
  end
ensure
  stop
end
permalink#recognizing? ⇒ Boolean
Returns:

(Boolean)
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 67

def recognizing?
  @recognizing == true
end
permalink#reconfigure(configuration = nil) ⇒ Object
Reinitialize the decoder with updated configuration.

See Decoder#reconfigure

Parameters:

configuration (Configuration) (defaults to: nil) — An optional new configuration to use. If this is nil, the previous configuration will be reloaded, with any changes applied.
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 35

def reconfigure(configuration = nil)
  self.configuration = configuration if configuration

  pause do
    decoder.reconfigure(configuration)
  end
end
permalink#start ⇒ Object
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 79

def start
  recordable.start_recording
  decoder.start_utterance
  @recognizing = true
end
permalink#stop ⇒ Object
[Hide source]


# File 'lib/pocketsphinx/speech_recognizer.rb', line 85

def stop
  decoder.end_utterance
  recordable.stop_recording
  @recognizing = false
end

Class: Pocketsphinx::Configuration::Default
Inherits:
Baseshow all
Defined in:
lib/pocketsphinx/configuration/default.rb
Direct Known Subclasses
Grammar, KeywordSpotting

Instance Attribute Summary
Attributes inherited from Base
#ps_config, #setting_definitions

Instance Method Summary
collapse
#changes ⇒ Object
Show details for settings which don’t match Pocketsphinx defaults.
#initialize ⇒ Default constructor
A new instance of Default.
Methods inherited from Base
#[], #[]=, #details, #setting_names

Constructor Details
permalink#initialize ⇒ Default
Returns a new instance of Default.


Instance Method Details
permalink#changes ⇒ Object
Show details for settings which don’t match Pocketsphinx defaults

[Hide source]

# File 'lib/pocketsphinx/configuration/default.rb', line 18

def changes
  details.reject { |d| d[:default] == d[:value] }
end

Class: Pocketsphinx::Configuration::KeywordSpotting
Inherits:
Defaultshow all
Defined in:
lib/pocketsphinx/configuration/keyword_spotting.rb
Instance Attribute Summary
collapse
#kws_threshold ⇒ Object
Returns the value of attribute kws_threshold.
Attributes inherited from Base
#ps_config, #setting_definitions

Instance Method Summary
collapse
#initialize(keyword, threshold = nil) ⇒ KeywordSpotting constructor
A new instance of KeywordSpotting.
#keyword ⇒ Object
#keyword=(value) ⇒ Object
#recognition_algorithm ⇒ Object
See SpeechRecognizer#algorithm.
Methods inherited from Default
#changes

Methods inherited from Base
#[], #[]=, #details, #setting_names

Constructor Details
permalink#initialize(keyword, threshold = nil) ⇒ KeywordSpotting
Returns a new instance of KeywordSpotting.


Instance Attribute Details
permalink#kws_threshold ⇒ Object
Returns the value of attribute kws_threshold.

Instance Method Details
permalink#keyword ⇒ Object

permalink#keyword=(value) ⇒ Object

permalink#recognition_algorithm ⇒ Object
See SpeechRecognizer#algorithmClass: Pocketsphinx::Configuration::Base
Inherits:
Objectshow all
Defined in:
lib/pocketsphinx/configuration/base.rb
Direct Known Subclasses
Default

Instance Attribute Summary
collapse
#ps_config ⇒ Object readonly
Returns the value of attribute ps_config.
#setting_definitions ⇒ Object readonly
Returns the value of attribute setting_definitions.
Instance Method Summary
collapse
#[](name) ⇒ Object
Get a configuration setting.
#[]=(name, value) ⇒ Object
Set a configuration setting with type checking.
#details(name = nil) ⇒ Object
Get details for one or all configuration settings.
#initialize ⇒ Base constructor
A new instance of Base.
#setting_names ⇒ Object
Constructor Details
permalink#initialize ⇒ Base
Returns a new instance of Base.


Instance Attribute Details
permalink#ps_config ⇒ Object (readonly)
Returns the value of attribute ps_config.

permalink#setting_definitions ⇒ Object (readonly)
Returns the value of attribute setting_definitions.

Instance Method Details
permalink#[](name) ⇒ Object
Get a configuration setting


permalink#[]=(name, value) ⇒ Object
Set a configuration setting with type checking


permalink#details(name = nil) ⇒ Object
Get details for one or all configuration settings

Parameters:

name (String) (defaults to: nil) — Name of setting to get details for. Gets details for all settings if nil.

permalink#setting_names ⇒ Object

Class: Pocketsphinx::Configuration::SettingDefinition
Inherits:
Structshow all
Defined in:
lib/pocketsphinx/configuration/setting_definition.rb
Constant Summary
collapse
TYPES =
[:integer, :float, :string, :boolean, :string_list]
Instance Attribute Summary
collapse
#deflt ⇒ Object
Returns the value of attribute deflt.
#doc ⇒ Object
Returns the value of attribute doc.
#name ⇒ Object
Returns the value of attribute name.
#type_code ⇒ Object
Returns the value of attribute type_code.
Class Method Summary
collapse
.from_arg_defs(ps_arg_defs) ⇒ Hash
Build setting definitions from pocketsphinx argument definitions.
Instance Method Summary
collapse
#default ⇒ Object
Convert string defaults from pocketsphinx to Ruby types.
#required? ⇒ Boolean
#type ⇒ Object
Instance Attribute Details
permalink#deflt ⇒ Object
Returns the value of attribute deflt

Returns:

(Object) — the current value of deflt
permalink#doc ⇒ Object
Returns the value of attribute doc

Returns:

(Object) — the current value of doc
permalink#name ⇒ Object
Returns the value of attribute name

Returns:

(Object) — the current value of name
permalink#type_code ⇒ Object
Returns the value of attribute type_code

Returns:

(Object) — the current value of type_code
Class Method Details
permalink.from_arg_defs(ps_arg_defs) ⇒ Hash
Build setting definitions from pocketsphinx argument definitions

Parameters:

ps_arg_defs (FFI::Pointer) — A pointer to the Pocketsphinx argument definitions
Returns:

(Hash) — A hash of setting definitions (name -> definition)

Instance Method Details
permalink#default ⇒ Object
Convert string defaults from pocketsphinx to Ruby types


permalink#required? ⇒ Boolean
Returns:

(Boolean)

permalink#type ⇒ Object
