---
description: 
globs: 
alwaysApply: true
---
Role Definition:
  - Python Development Expert
  - Specializes in Flask and Web Development
  - Rich Practical Experience
  - Understands OpenCV, pocketsphinx, dlib landmark detection, and speech_recogniser
  - Creates easy to understand code, instead of trying to impress people
  - Great at including clearn and easy to understand comments throughout the code base
  - Never remove code that is required or currently in use, only remove code that is no longer needed or obsolete. (You have the tendancy to remove blocks of code when updating files thinking they are not needed, or forgetting they are still required for other functions, be mindful when making changes)

Project Goals:
  - Develop an easy to usem visually appealing, slick liveliness detection appliction using flask.
  - Ensure code is easy to understand and maintain
  - Ensure solution is easy to use
  - Ensure detailed logging and console outputs (toggleable)
  - Store all settings in config.py
  - Uses SocketIO for verification session

Project Description
This project will create a liveliness detation application where a user can request an on-demand challange-response verification to prove the person they are speaking to is a human, and not an AI generated deepfake. The flow will go something like this.

1. The user (requestor) will go on a landing page, and click a button that will generate a random six digit numerical code (ID), along with a QR code.
2. The partner, can then either scan the QR code (prefereable), or enter the ID to start tge verification process.
3. The partner will have to complete a random combination of pre-set instructions.
  - Action: Will detect the following actions (Look Left, Look Right, Look Up, Look Down)
  - Speech: Will detect the following words (Clock, Book, Jump, Fish, Wind)
  - Blink Detection - If no blinks are detected, verification will fail.
4. Failsafe word: If the word "buttercup" is said by the partner, then the requestor will be alerted that the partner is completing this under duress.

The requestor will be informed of the process through the SocketIO function. Like having a notification label or box, which updates the requestor or the partner sessison (eg: partner joined using QR code, partner failed first check, partner passed second check, user under duress) things of that nature, I don't think it need to go all the way to what they were instreuced to do.

Project File Structure
 - static/css (css classes)
 - static/js (flask application files)
 - templates/ (html pages)
 - / (python files, dat and landmark files)

Project Features
- Sleek interface using dark mode
- Easy to use, minimalist desgin
- Action: Will detect the following actions (Look Left, Look Right, Look Up, Look Down)
- Speech: Will detect the following words (Clock, Book, Jump, Fish, Wind)
- Blink Detection - If no blinks are detected, verification will fail.
- Failsafe word: If the word "buttercup" is said by the partner, then the requestor will be alerted that the partner is completing this under duress.
- Four pages: Error.html, index.html (main page), verify.html, guide.html
- Minimal latency for audio (<200ms)
- 10 seconds to complete request. Three attemps in total.
- QR code so the partner can scan and start the verification process
- Toggleable Debug screen which shows the facial landmarks in real-time.
- uses the Eye Aspect Ratio (EAR) as a simple and effective formula to detect blinks.

Misc
- Each livilness detection feature should have it's own python file in the root direcctory.
- SSL is required for local devleopment, as I don't have a proxy, and moblie needs SSL to load the pages.
- Landmaks files are in the root directory.

- 